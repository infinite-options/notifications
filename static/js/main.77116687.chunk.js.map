{"version":3,"sources":["components/Recipients.js","components/TextBox.js","components/Saved.js","App.js","serviceWorker.js","index.js"],"names":["Recipients","props","resize","setState","height","window","innerWidth","innerHeight","columnDefs","field","headerCheckboxSelection","checkboxSelection","headerCheckboxSelectionFilteredOnly","width","headerName","forEach","colDef","sortable","suppressMovable","filterParams","buttons","filter","comparator","filterDate","cellValue","dateParts","split","day","parseInt","month","year","Date","compareTo","state","rowData","fetch","this","api","then","res","json","data","Items","item","push","name","S","email","phone","zipCode","N","n_orders","number_of_orders","first_order","created_at","slice","last_order","last_order_date","row","className","style","onGridReady","params","gridApi","onSelectionChanged","updateValidity","defaultColDef","resizable","suppressSizeToFit","groupSelectsFiltered","groupUseEntireRow","rowSelection","React","Component","TextBox","getMsg","text","current","value","createRef","ref","placeholder","onInput","Saved","openGroups","showGroups","closeGroups","groups","Container","Button","variant","onClick","send","disabled","msgValid","selectionValid","sendAll","Modal","show","onHide","centered","Header","closeButton","Title","Body","length","ListGroup","map","group","Item","select","nodes","action","key","Footer","save","App","sendMsg","readyToSend","selected","recipients","getSelectedNodes","emails","node","toLowerCase","indexOf","formData","FormData","append","join","method","body","alert","alreadySelected","setSelected","saveGroup","prompt","newGroup","saved","onresize","fluid","Row","Col","lg","ready","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77116687.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\nexport default class Recipients extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let columnDefs = [\r\n      {field: '', headerCheckboxSelection: true, checkboxSelection: true,\r\n       headerCheckboxSelectionFilteredOnly: true, width: 50},\r\n      {headerName: 'Name', field: 'name'},\r\n      {headerName: 'Email', field: 'email'},\r\n      {headerName: 'Phone', field: 'phone'},\r\n      {headerName: 'Zip Code', field: 'zipCode'},\r\n      {headerName: '# Orders', field: 'n_orders'},\r\n      {headerName: 'Created', field: 'first_order'},\r\n      {headerName: 'Last Order', field: 'last_order'}\r\n    ]\r\n    columnDefs.forEach(colDef => {\r\n      if (colDef.field) colDef.sortable = true\r\n      colDef.suppressMovable = true\r\n      colDef.filterParams = {\r\n        buttons: ['apply', 'reset']\r\n      }\r\n      switch (colDef.field) {\r\n        case '':\r\n          break\r\n        case 'n_orders':\r\n          colDef.filter = 'agNumberColumnFilter'\r\n          break\r\n        case 'first_order':\r\n        case 'last_order':\r\n          colDef.filter = 'agDateColumnFilter'\r\n          colDef.filterParams.comparator = function(filterDate, cellValue) {\r\n            var dateParts = cellValue.split('-')\r\n            var day = parseInt(dateParts[2])\r\n            var month = parseInt(dateParts[1]) - 1\r\n            var year = parseInt(dateParts[0])\r\n            var cellDate = new Date(year, month, day)\r\n            return cellDate.compareTo(filterDate)\r\n          }\r\n          break\r\n        default:\r\n          colDef.filter = true\r\n      }\r\n    })\r\n    this.state = {\r\n      columnDefs: columnDefs,\r\n      rowData: [],\r\n      height: window.innerWidth >= 900 ? window.innerHeight-32 : 500\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    fetch(`${this.props.api}/all_orders`).then(res => res.json().then(data => {\r\n      let rowData = [];\r\n      data.Items.forEach(item => {\r\n        rowData.push({\r\n          name: item.name.S, email: item.email.S, phone: item.phone.S,\r\n          zipCode: item.zipCode.N, n_orders: item.number_of_orders.S,\r\n          first_order: item.created_at.S.slice(0, 10),\r\n          last_order: item.last_order_date.S.slice(0, 10)\r\n        })\r\n      })\r\n      rowData.forEach(row => {\r\n        row.zipCode = parseInt(row.zipCode)\r\n        row.n_orders = parseInt(row.n_orders)\r\n      })\r\n      this.setState({\r\n        rowData: rowData\r\n      })\r\n    }))\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='ag-theme-alpine' style={{'height': `${this.state.height}px`}}>\r\n        <AgGridReact\r\n          onGridReady={ params => this.gridApi = params.api }\r\n          onSelectionChanged={this.props.updateValidity}\r\n          columnDefs={this.state.columnDefs}\r\n          rowData={this.state.rowData}\r\n          defaultColDef={{ resizable: true }}\r\n          suppressSizeToFit={true}\r\n          groupSelectsFiltered={true}\r\n          groupUseEntireRow={true}\r\n          rowSelection={'multiple'}>\r\n        </AgGridReact>\r\n      </div>\r\n    );\r\n  }\r\n  resize = () => {\r\n    this.setState({\r\n      height: window.innerWidth >= 990 ? window.innerHeight-32 : 500\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class TextBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.text = React.createRef();\r\n    this.state = {\r\n      height: window.innerWidth >= 990 ? window.innerHeight-96 : 150\r\n    }\r\n  }\r\n  getMsg = () => {\r\n    return this.text.current.value;\r\n  }\r\n  resize = () => {\r\n    this.setState({\r\n      height: window.innerWidth >= 990 ? window.innerHeight-96 : 150\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <textarea ref={this.text} className='w-100 p-3'\r\n         style={{'height': `${this.state.height}px`}}\r\n          placeholder='Enter message here'\r\n          onInput={this.props.updateValidity}/>\r\n        <br/>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Button, Modal, ListGroup } from 'react-bootstrap'\r\n\r\nexport default class Saved extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      groups: [],\r\n      showGroups: false\r\n    }\r\n  }\r\n\r\n  openGroups = () => {\r\n    this.setState({showGroups: true})\r\n  }\r\n\r\n  closeGroups = () => {\r\n    this.setState({showGroups: false})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container className='d-flex justify-content-around p-3'>\r\n        <Button variant='secondary' onClick={this.openGroups}>\r\n          Saved groups\r\n        </Button>\r\n        <Button variant='secondary' onClick={this.props.send}\r\n          disabled={!this.props.msgValid || !this.props.selectionValid}>\r\n          Send Message\r\n        </Button>\r\n        <Button variant='secondary' onClick={this.props.sendAll}\r\n          disabled={!this.props.msgValid}>\r\n          Send To All\r\n        </Button>\r\n\r\n        <Modal show={this.state.showGroups} onHide={this.closeGroups} centered>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Saved Groups</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            {this.state.groups.length ? <ListGroup>\r\n              {this.state.groups.map(group =>\r\n                <ListGroup.Item onClick={() => this.props.select(group.nodes)}\r\n                  action key={group.name}>\r\n                  {group.name}\r\n                </ListGroup.Item>\r\n              )}\r\n            </ListGroup> : 'No saved groups'}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant='secondary' onClick={this.props.save} disabled={!this.props.selectionValid}>\r\n              Save new group\r\n            </Button>\r\n            <Button variant='secondary' onClick={this.closeGroups}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Recipients from './components/Recipients';\nimport TextBox from './components/TextBox';\nimport Saved from './components/Saved';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.recipients = React.createRef();\n    this.text = React.createRef();\n    this.saved = React.createRef();\n    this.state = {\n      api: 'https://phaqvwjbw6.execute-api.us-west-1.amazonaws.com/dev/api/v1',\n      msgValid: false,\n      selectionValid: false\n    }\n    window.onresize = this.resize\n  }\n  sendMsg = () => {\n    if (!this.readyToSend()) return\n    let selected = this.recipients.current.gridApi.getSelectedNodes()\n    let emails = []\n    for (let node of selected) {\n      let email = `email_${node.data.email.toLowerCase()}`\n      if (emails.indexOf(email) === -1) emails.push(email)\n    }\n    const formData = new FormData()\n    formData.append('tags', emails.join(','))\n    formData.append('message', this.text.current.getMsg())\n    fetch(`${this.state.api}/send_notification`, {\n      method: 'POST',\n      body: formData\n    })\n    alert('Message sent successfully')\n  }\n  sendAll = () => {\n    if (!this.text.current.getMsg()) return\n    const formData = new FormData()\n    formData.append('tags', 'default')\n    formData.append('message', this.text.current.getMsg())\n    fetch(`${this.state.api}/send_notification`, {\n      method: 'POST',\n      body: formData\n    })\n    alert('Message sent successfully')\n  }\n  updateValidity = () => {\n    this.setState({\n      msgValid: this.text.current.getMsg() !== '',\n      selectionValid: this.recipients.current.gridApi.getSelectedNodes().length > 0\n    })\n  }\n  readyToSend = () => {\n    return (\n      this.recipients.current.gridApi.getSelectedNodes().length &&\n      this.text.current.getMsg()\n    )\n  }\n  select = (nodes) => {\n    let alreadySelected = true\n    nodes.forEach(node => {\n      if (!node.selected) alreadySelected = false\n      node.setSelected(true)\n    });\n    if (alreadySelected) nodes.forEach(node => {\n      node.setSelected(false)\n    })\n  }\n  saveGroup = () => {\n    if (!this.state.selectionValid) return\n    let selected = this.recipients.current.gridApi.getSelectedNodes()\n    let name = prompt('Enter group name:')\n    if (!name.length) return\n    let newGroup = {name: name, nodes: selected}\n    this.saved.current.setState({\n      groups: [...this.saved.current.state.groups, newGroup]\n    });\n  }\n  render() {\n    return (\n      <Container fluid className='h-100 pt-3 pl-3 pr-3 pb-0'>\n        <Row className='d-flex'>\n          <Col lg={8} className='mb-3'>\n            <Recipients ref={this.recipients} api={this.state.api}\n              updateValidity={this.updateValidity}/>\n          </Col>\n          <Col lg={4}>\n            <TextBox ref={this.text} send={this.sendMsg} ready={this.readyToSend}\n              updateValidity={this.updateValidity}/>\n            <Saved ref={this.saved} select={this.select} save={this.saveGroup}\n              send={this.sendMsg} sendAll={this.sendAll} msgValid={this.state.msgValid}\n              selectionValid={this.state.selectionValid}/>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n  resize = () => {\n    this.text.current.resize()\n    this.recipients.current.resize()\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}